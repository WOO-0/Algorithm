1. P와 NP
 - 다루기 힘든 문제란 문제를 해결하는 다항식 시간 알고리즘이 존재하지 않는 문제
  -> 문제의 해답을 구하는데 다항식 시간 필요하면 현실적인 시간에 해결할 수 있다고 보고, 지수 시간 이상이 필요하면 비현실적인 시간에 해결한다고 주장함.
 * 다루기 힘든 정도에 따라 문제를 다음과 같이 3가지로 분류
  - 다항식 시간 알고리즘을 찾은 문제
   -> 정렬 문제: O(nlogn), 정렬된 배열 검색 문제: O(logn). 행렬 곱셈 문제: O(n^2.3728639), 최단 경로 문제, 최소 비용 신장 트리 문제, 연쇄 행렬 곱셈 문제
  - 다루기 힘들다고 증명된 문제
   -> 비다항식(nonpolynomial)크기의 결과를 요구하는 비현실적인 문제
   -> 결정 불가능한 문제(undecidable Problem)
  - 다루기 힘들다고 증명되지 않았고, 다항식 시간 알고리즘도 찾지 못한 문제
   -> 0-1 배낭 문제, 순회 외판원 문제, 그래프 색칠하기 문제, 해밀토니안 회로 문제
 * 최적화 문제 vs 결정 문제
  - 최적화 문제
   -> 최대 혹은 최소가 되는 경우를 찾는 문제
   -> 그래프에서 길이가 가장 짧은 해밀토니안 경로를 찾는 문제
  - 결정 문제
   -> 해답을 '예', '아니오'로 답하는 문제
   -> 그래프에서 길이가 k 이하인 해밀토니안 경로가 존재하는지 대답하는 문제
  - 최적화 문제에 대한 해답을 알고 있다면 결정 문제에 대한 해답은 저절로 알 수 있기 때문에 P와 NP를 따룰 때는 결정 문제만 고려한다.
  - 최적화 문제에 대한 다항식 시간 알고리즘이 있다면 결정 문제에 대한 다항식 시간 알고리즘도 쉽게 유추할 수 있다.
 - P(Polynomial)는 다항식 시간 알고리즘이 존재하는 모든 결정 문제들의 집합
 - NP(Nondeterministic Polynomial)는 다항식 시간 비결정적 알고리즘으로 해결할 수 있는 모든 결정 문제의 집합
  -> 다항식 시간 비결정적 알고리즘은 검증 단계가 다항식 시간인 알고리즘
  -> 하지만, 결정 문제 자체를 해결할 수 있는 다항식 시간 알고리즘이 존재해야 함을 의미하지 않음
 - 결정적(Deterministic) 알고리즘
  -> 결과가 유일하게 정의된 연산만을 써서 만들어진 알고리즘
  -> 컴퓨터상에서 동작하는 모든 알고리즘 등 우리가 지금까지 작성하는 모든 알고리즘
 - 비결정적(Nondeterministic) 알고리즘
  -> 연산 결과가 상황에 따라 달라질 수 있는 연산을 써서 만들어진 알고리즘
  -> 추측(비결정적:Nondeterministic) 단계: 사용되는 연산자들은 결과가 유일하게 정의되지 않음
  -> 검증(결정적:Deterministic, Verification) 단계
 - P != NP, P = NP 증명
  -> NP에 속하면서 P에는 속하지 않는 문제를 찾으면 P != NP를 증명
  -> NP에 속한 모든 문제에 대해 다항식 시간 알고리즘을 찾아야 P = NP를 증명

2. NP-Complete 문제
 - 다항식 시간 변환
  -> 문제 A의 사례 α를 문제 B의 사례 β로 바꾸되 아래 성질을 만족하면 다항식 시간 변환(Reduction)이라 하고, 이를 A<=p B로 표기
  -> 변환은 다항식 시간에 이루어짐
  -> 두 사례의 답 일치
  -> 문제 B가 쉬운 문제라면 문제 A도 쉬운 문제
 - 다음을 만족하면 문제 B는 NP-Complete
  -> 문제 B는 NP에 속함
  -> NP에 있는 모든 문제 A에 대해 A<= p B
 - 문제 B만 다항식 시간에 풀 수 있으면 NP에 속한 모든 문제들을 다항식 시간에 풀 수 있음
 - 문제 B는 NP 집합에서 가장 어려운 문제
 - 문제 B가 NP-Complete이면, 동시에 NP-Hard
 - 어느 문제 A에 대해서, 만일 모든 NP 문제가 문제 A로 다항식 시간에 변환이 가능하다면, 문제 A는 NP-Hard 문제
  -> 문제 A는 최적화 문제도 포함한다.
 - 1971년 Cook이 SAT 문제가 NP-Hard 문제라고 증명
  -> SAT <= p 문제 B이면 문제 B는 SAT만큼 어려운 문제
  -> 문제 B도 NP-Hard
 - NP-Complete 문제들은 서로 얽혀 있어서, 어느 한 문제만 다항식 시간에 해결되면, 모든 NP-Complete 문제들이 다항식 시간에 해결
 - 어떤 문제가 NP-Complete임이 확인되면
  -> 쉬운 알고리즘을 찾으려는 헛된 노력은 일단 중지
  -> 주어진 시간과 예산 내에서 최대한 좋은 해를 찾는 알고리즘(근사해) 개발에 집중
 - NP-Complete 문제들은 컴퓨터 분야뿐만 아니라 과학, 공학, 의학, 약학, 경영학, 정치학, 금융 심지어는 문화 분야까지 광범위한 분야에서 포함

3. NP-Complete 문제들
 - SAT(Satisfiability)          - 그래프 색칠하기(Graph Coloring)
 - 부분 집합의 합(Subset Sum)    - 집합 커버(Set Cover)
 - 분할(Partition)              - 최장 경로(Longest Path)
 - 0-1 배낭(Knapsack)           - 여행자(Traveling Salesman) 문제
 - 정점 커버(Vertex Cover)      - 해밀토니안 사이클(Hamiltonian Cycle)
 - 독립 집합(Independence Set)  - 통 채우기(Bin Packing)
 - 클리크(Clique)               - 작업 스케줄링(Job Scheduling)