1. 그래프 기본
 - 서로 대칭적인 관계를 연결해서 나타낸 그래프를 무향 그래프라고 한다.
 - 유향 그래프는 방향성의 개념을 포함하고 있으며 서로 대칭적이지 않은 관계를 표현한다.
 - 가중치 그래프는 간선에 가중치가 부여된 그래프이다.
 - 경로 중에 포함된 정점을 최대 한번만 지나는 경로를 단순 경로라고 한다.
 - 시작한 정점에서 끝나는 경로를 사이클이라고 하고 사이클이 없는 유향 그래프를 DAG(Directed Acyclic Graph)로 표기한다.
 - 그래프 표현에서 핵심은 각 정점에 대한 인접 정점의 정보를 표현하는 것이다.
 - 대표적인 방법으로 인접 행렬과 인접 리스트를 이용하는 방법이 있다.
 - 인접 행렬은 2차원 배열을 이용해서 간선 정보를 저장
  -> 인접 행렬은 배열이라 사용하기가 쉽지만 정점의 개수 N이 커지면 메모리 크기가 N^2의 비율로 증가한다.
  -> 인접 정점을 찾는 시간은 정점의 수 N에 비례해서 증가한다.
 - 인접 리스트는 각 정점마다 인접 정점으로 나가는 간선의 정보를 연결 리스트로 저장한다.
  -> 인접 행렬에 비해 불필요한 메모리 사용과 인접 정점을 찾는 비용을 줄일 수 있ㄷ.
  -> 구현과 사용이 까다롭다.

2. 그래프 탐색
 * 깊이 우선 탐색
  - 시작 정점에서 갈 수 있는 한 방향을 선택해서 다음 정점으로 이동
  - 선택된 정점에서 다시 앞과 같은 작업을 반복 수행하면서 갈 수 있는 경로가 있는 곳까지 깊이 탐색
  - 이미 방문했던 정점은 재방문 하지 않음 
  - 더 이상 갈 곳이 없으면, 가장 최근에 방문한 갈림길이 있는 정점으로 되돌아와서 다른 방향의 정점으로 탐색을 계속 반복하여 결국 모든 정점을 방문하는 순회 방법
  - 가장 마지막에 만났던 갈림길의 정점으로 되돌아가서 다시 깊이 우선 탐색을 반복해야 하므로 후입선출 구조의 스택을 사용하거나 재귀 호출을 이용해서 구현
 * 너비 우선 탐색
  - 너비 우선 탐색은 탐색 시작점의 인접한 정점들을 먼저 모두 차례로 방문한 후에, 방문했던 정점을 시작점으로 하여 다시 인접한 정점들을 차례로 방문하는 방식
  - 인접한 정점들에 대해 탐색을 한 후, 차례로 다시 너비우선탐색을 진행해야 하므로, 선입선출 형태의 자료 구조인 큐를 활용
  - 정점을 방문하게 되면 시작 정점에서 해당 정점까지의 최단 경로를 알 수 있다.

3. 상호 배타 집합
 - 교집합이 없는 여러 개의 집합들을 처리하기 위해 사용하는 자료 구조이다.
 - 상호 배타 집합을 표현하는 방법으로 연결리스트와 트리를 이용하는 방법이 있다.
 - 상호 배타 집합의 주요 연산은 집합의 생성, 임의 원소가 속한 집합을 식별, 두 집합의 더하기이다.
  -> Make-Set, Find-Set, Union
 - 트리를 사용해서 상호 배타 집합을 표현하는 경우에 시간 효율성을 높이기 위해 루트를 찾아가는 경로 압축(path compression)과 높이를 표현하는 Rank 값을 사용한다.
 